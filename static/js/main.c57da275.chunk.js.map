{"version":3,"sources":["components/App/index.js","actions/coinActions.js","actions/types.js","serviceWorker.js","reducers/coinReducer.js","reducers/index.js","store/index.js","index.js"],"names":["App","state","loading","fetchingAll","buttonStyle","display","refresh","_this","props","fetchAllCoins","fetchCoins","setState","setTimeout","displayAllCoins","this","console","log","currencies","baseUrl","data","forEach","currency","index","push","key","CoinInfo","Id","link","concat","Url","coin","fullname","FullName","name","Name","icon","ImageUrl","price","DISPLAY","USD","PRICE","directVol","VOLUME24HOURTO","totalVol","TOTALVOLUME24HTO","mktCap","MKTCAP","sevenDayChart","chg24H","CHANGEPCT24HOUR","columns","title","dataIndex","render","react_default","a","createElement","className","avatar","src","tag","alt","color","Fragment","es_button","type","onClick","block","table","dataSource","pagination","onRow","record","window","location","style","Component","connect","items","dispatch","fetch","then","res","json","coins","payload","Data","catch","error","Boolean","hostname","match","initialState","coinReducer","arguments","length","undefined","action","Object","objectSpread","combineReducers","middleware","thunk","store","createStore","rootReducer","applyMiddleware","apply","ReactDOM","es","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c57da275.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"antd/dist/antd.css\";\nimport { Table, Button, Avatar, Tag } from \"antd\";\n\nimport { fetchCoins, fetchAllCoins } from \"../../actions/coinActions\";\n\nclass App extends Component {\n  state = {\n    loading: false,\n    fetchingAll: false,\n    buttonStyle: { display: \"initial\" }\n  };\n\n  componentWillMount() {\n    this.props.fetchCoins();\n  }\n\n  refresh = () => {\n    this.state.fetchingAll\n      ? this.props.fetchAllCoins()\n      : this.props.fetchCoins();\n    this.setState({ loading: true });\n    setTimeout(() => {\n      this.setState({\n        loading: false\n      });\n    }, 1000);\n  };\n\n  displayAllCoins = () => {\n    this.props.fetchAllCoins();\n    this.setState({ fetchingAll: true });\n    setTimeout(() => {\n      this.setState({\n        buttonStyle: { display: \"none\" }\n      });\n    }, 2000);\n  };\n\n  render() {\n    console.log(this.props);\n    const { currencies } = this.props;\n    const { loading } = this.state;\n    const baseUrl = \"https://www.cryptocompare.com\";\n\n    const data = [];\n    currencies.forEach((currency, index) => {\n      data.push({\n        key: currency.CoinInfo.Id,\n        link: `${baseUrl}${currency.CoinInfo.Url}`,\n        index: index + 1,\n        coin: {\n          fullname: currency.CoinInfo.FullName,\n          name: currency.CoinInfo.Name,\n          icon: `${baseUrl}${currency.CoinInfo.ImageUrl}`\n        },\n        price: currency.DISPLAY.USD.PRICE,\n        directVol: currency.DISPLAY.USD.VOLUME24HOURTO,\n        totalVol: currency.DISPLAY.USD.TOTALVOLUME24HTO,\n        mktCap: currency.DISPLAY.USD.MKTCAP,\n        sevenDayChart: `https://images.cryptocompare.com/sparkchart/${\n          currency.CoinInfo.Name\n        }/USD/latest.png?ts=1555401600`,\n        chg24H: currency.DISPLAY.USD.CHANGEPCT24HOUR\n      });\n    });\n\n    const columns = [\n      {\n        title: \"#\",\n        dataIndex: \"index\",\n        key: \"index\"\n      },\n      {\n        title: \"Coin\",\n        dataIndex: \"coin\",\n        key: \"coin\",\n        render: coin => (\n          <div className=\"display-icon\">\n            <Avatar src={coin.icon} />\n            <div className=\"display-names\">\n              <div>{coin.fullname}</div>\n              <div>{coin.name}</div>\n            </div>\n          </div>\n        )\n      },\n      {\n        title: \"Price\",\n        dataIndex: \"price\",\n        key: \"price\",\n        render: price => <Tag>{price}</Tag>\n      },\n      {\n        title: \"Direct Vol. 24H\",\n        dataIndex: \"directVol\",\n        key: \"directVol\"\n      },\n      {\n        title: \"Total Vol. 24H\",\n        dataIndex: \"totalVol\",\n        key: \"totalVol\"\n      },\n      {\n        title: \"Mkt. Cap.\",\n        dataIndex: \"mktCap\",\n        key: \"mktCap\"\n      },\n      {\n        title: \"7d Chart (USD)\",\n        dataIndex: \"sevenDayChart\",\n        key: \"sevenDayChart\",\n        render: sevenDayChart => <img src={sevenDayChart} alt=\"chart\" />\n      },\n      {\n        title: \"Chg. 24H\",\n        dataIndex: \"chg24H\",\n        key: \"chg24H\",\n        render: chg24H => (\n          <Tag color={chg24H > 0 ? \"green\" : \"red\"}>{chg24H}%</Tag>\n        )\n      }\n    ];\n\n    return (\n      <>\n        <Button type=\"primary\" onClick={this.refresh} loading={loading} block>\n          Reload\n        </Button>\n        <Table\n          dataSource={data}\n          columns={columns}\n          pagination={false}\n          onRow={record => {\n            return {\n              onClick: () => {\n                window.location = record.link;\n              }\n            };\n          }}\n        />\n        <Button\n          type=\"primary\"\n          onClick={this.displayAllCoins}\n          block\n          style={this.state.buttonStyle}\n        >\n          View All Coins\n        </Button>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currencies: state.currencies.items\n});\n\nexport default connect(\n  mapStateToProps,\n  { fetchCoins, fetchAllCoins }\n)(App);\n","import { FETCH_COINS } from \"./types\";\n\nexport const fetchCoins = () => dispatch => {\n  fetch(\n    \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD\"\n  )\n    .then(res => res.json())\n    .then(coins => {\n      dispatch({\n        type: FETCH_COINS,\n        payload: coins.Data\n      });\n    })\n    .catch(error => console.log(error));\n};\n\nexport const fetchAllCoins = () => dispatch => {\n  fetch(\n    \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=100&tsym=USD\"\n  )\n    .then(res => res.json())\n    .then(coins => {\n      dispatch({\n        type: FETCH_COINS,\n        payload: coins.Data\n      });\n    })\n    .catch(error => console.log(error));\n};\n","export const FETCH_COINS = \"FETCH_COINS\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_COINS } from \"../actions/types\";\n\nconst initialState = {\n  items: []\n};\n\nconst coinReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_COINS:\n      return {\n        ...state,\n        items: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default coinReducer;\n","import { combineReducers } from 'redux';\nimport coinReducer from './coinReducer';\n\nexport default combineReducers({\n  currencies: coinReducer\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"../reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(...middleware)\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\n\nimport App from \"./components/App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}